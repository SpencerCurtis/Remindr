//
//  TabBarIconStyleKit.swift
//  Remindr
//
//  Created by Spencer Curtis on 2/7/17.
//  Copyright Â© 2017 Spencer Curtis. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TabBarIconStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let remindrCyan: UIColor = UIColor(red: 0.545, green: 0.784, blue: 0.839, alpha: 1.000)
        static let remindrCyanHighlight: UIColor = TabBarIconStyleKit.remindrCyan.highlight(withLevel: 0.5)
        static var imageOfIncompleteListIconUnselected: UIImage?
        static var incompleteListIconUnselectedTargets: [AnyObject]?
        static var imageOfCompleteListIconSelected: UIImage?
        static var completeListIconSelectedTargets: [AnyObject]?
        static var imageOfIncompleteListIconSelected: UIImage?
        static var incompleteListIconSelectedTargets: [AnyObject]?
        static var imageOfCompleteListIconUnselected: UIImage?
        static var completeListIconUnselectedTargets: [AnyObject]?
        static var imageOfMiddleTabBarButtonUnselected: UIImage?
        static var middleTabBarButtonUnselectedTargets: [AnyObject]?
        static var imageOfMiddleTabBarButtonSelected: UIImage?
        static var middleTabBarButtonSelectedTargets: [AnyObject]?
    }

    //// Colors

    public dynamic class var remindrCyan: UIColor { return Cache.remindrCyan }
    public dynamic class var remindrCyanHighlight: UIColor { return Cache.remindrCyanHighlight }

    //// Drawing Methods

    public dynamic class func drawIncompleteListIconUnselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Color Declarations
        let remindrGray = UIColor(red: 0.580, green: 0.608, blue: 0.627, alpha: 1.000)
        let remindrGrayHighlight2 = remindrGray.highlight(withLevel: 0.3)

        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 146, height: 146))
        TabBarIconStyleKit.remindrCyanHighlight.setFill()
        oval4Path.fill()


        //// Group 6
        //// Group 5
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 24, y: 94, width: 15, height: 15))
        remindrGrayHighlight2.setFill()
        oval3Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 42, y: 94, width: 85, height: 15), cornerRadius: 3)
        remindrGrayHighlight2.setFill()
        rectangle3Path.fill()




        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 24, y: 67, width: 15, height: 15))
        remindrGrayHighlight2.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 42, y: 67, width: 85, height: 15), cornerRadius: 3)
        remindrGrayHighlight2.setFill()
        rectanglePath.fill()




        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 24, y: 40, width: 15, height: 15))
        remindrGrayHighlight2.setFill()
        oval2Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 42, y: 40, width: 85, height: 15), cornerRadius: 3)
        remindrGrayHighlight2.setFill()
        rectangle2Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCompleteListIconSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 75, y: 22.22))
        bezierPath.addCurve(to: CGPoint(x: 49.23, y: 28.93), controlPoint1: CGPoint(x: 65.64, y: 22.22), controlPoint2: CGPoint(x: 56.85, y: 24.65))
        bezierPath.addCurve(to: CGPoint(x: 22.22, y: 75), controlPoint1: CGPoint(x: 33.11, y: 37.96), controlPoint2: CGPoint(x: 22.22, y: 55.21))
        bezierPath.addCurve(to: CGPoint(x: 75, y: 127.78), controlPoint1: CGPoint(x: 22.22, y: 104.15), controlPoint2: CGPoint(x: 45.85, y: 127.78))
        bezierPath.addCurve(to: CGPoint(x: 127.78, y: 75), controlPoint1: CGPoint(x: 104.15, y: 127.78), controlPoint2: CGPoint(x: 127.78, y: 104.15))
        bezierPath.addCurve(to: CGPoint(x: 75, y: 22.22), controlPoint1: CGPoint(x: 127.78, y: 45.85), controlPoint2: CGPoint(x: 104.15, y: 22.22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 148.5, y: 75))
        bezierPath.addCurve(to: CGPoint(x: 75, y: 148.5), controlPoint1: CGPoint(x: 148.5, y: 115.59), controlPoint2: CGPoint(x: 115.59, y: 148.5))
        bezierPath.addCurve(to: CGPoint(x: 1.5, y: 75), controlPoint1: CGPoint(x: 34.41, y: 148.5), controlPoint2: CGPoint(x: 1.5, y: 115.59))
        bezierPath.addCurve(to: CGPoint(x: 31.37, y: 15.84), controlPoint1: CGPoint(x: 1.5, y: 50.74), controlPoint2: CGPoint(x: 13.25, y: 29.23))
        bezierPath.addCurve(to: CGPoint(x: 75, y: 1.5), controlPoint1: CGPoint(x: 43.57, y: 6.83), controlPoint2: CGPoint(x: 58.66, y: 1.5))
        bezierPath.addCurve(to: CGPoint(x: 148.5, y: 75), controlPoint1: CGPoint(x: 115.59, y: 1.5), controlPoint2: CGPoint(x: 148.5, y: 34.41))
        bezierPath.close()
        TabBarIconStyleKit.remindrCyan.setFill()
        bezierPath.fill()


        //// Check Drawing
        let checkPath = UIBezierPath()
        checkPath.move(to: CGPoint(x: 29.91, y: 74.27))
        checkPath.addLine(to: CGPoint(x: 65.25, y: 112.84))
        checkPath.addLine(to: CGPoint(x: 144.89, y: 19.16))
        checkPath.addLine(to: CGPoint(x: 138.88, y: 13.52))
        checkPath.addLine(to: CGPoint(x: 65.25, y: 98.78))
        checkPath.addLine(to: CGPoint(x: 36.72, y: 67.46))
        checkPath.addLine(to: CGPoint(x: 29.91, y: 74.27))
        checkPath.close()
        TabBarIconStyleKit.remindrCyan.setFill()
        checkPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawIncompleteListIconSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Color Declarations
        let remindrGray = UIColor(red: 0.580, green: 0.608, blue: 0.627, alpha: 1.000)

        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 1.5, width: 146, height: 146))
        TabBarIconStyleKit.remindrCyan.setFill()
        oval4Path.fill()


        //// Group 4
        //// Group 3
        //// Group 6
        //// Group 5
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 24, y: 95, width: 15, height: 15))
        remindrGray.setFill()
        oval3Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 42, y: 95, width: 85, height: 15), cornerRadius: 3)
        remindrGray.setFill()
        rectangle3Path.fill()




        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 24, y: 68, width: 15, height: 15))
        remindrGray.setFill()
        ovalPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 42, y: 68, width: 85, height: 15), cornerRadius: 3)
        remindrGray.setFill()
        rectanglePath.fill()




        //// Group
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 24, y: 41, width: 15, height: 15))
        remindrGray.setFill()
        oval2Path.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 42, y: 41, width: 85, height: 15), cornerRadius: 3)
        remindrGray.setFill()
        rectangle2Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCompleteListIconUnselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 16.22, y: 17.22)
        context.scaleBy(x: 1.1, y: 1.1)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 52.78, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 27.01, y: 6.71), controlPoint1: CGPoint(x: 43.42, y: 0), controlPoint2: CGPoint(x: 34.63, y: 2.44))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 52.78), controlPoint1: CGPoint(x: 10.89, y: 15.74), controlPoint2: CGPoint(x: 0, y: 32.99))
        bezierPath.addCurve(to: CGPoint(x: 52.78, y: 105.56), controlPoint1: CGPoint(x: 0, y: 81.93), controlPoint2: CGPoint(x: 23.63, y: 105.56))
        bezierPath.addCurve(to: CGPoint(x: 105.56, y: 52.78), controlPoint1: CGPoint(x: 81.93, y: 105.56), controlPoint2: CGPoint(x: 105.56, y: 81.93))
        bezierPath.addCurve(to: CGPoint(x: 52.78, y: 0), controlPoint1: CGPoint(x: 105.56, y: 23.63), controlPoint2: CGPoint(x: 81.93, y: 0))
        bezierPath.close()
        TabBarIconStyleKit.remindrCyanHighlight.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.stroke()

        context.restoreGState()


        //// Check Drawing
        let checkPath = UIBezierPath()
        checkPath.move(to: CGPoint(x: 29.91, y: 74.27))
        checkPath.addLine(to: CGPoint(x: 65.25, y: 112.84))
        checkPath.addLine(to: CGPoint(x: 144.89, y: 19.16))
        checkPath.addLine(to: CGPoint(x: 138.88, y: 13.52))
        checkPath.addLine(to: CGPoint(x: 65.25, y: 98.78))
        checkPath.addLine(to: CGPoint(x: 36.72, y: 67.46))
        checkPath.addLine(to: CGPoint(x: 29.91, y: 74.27))
        checkPath.close()
        TabBarIconStyleKit.remindrCyanHighlight.setFill()
        checkPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawMiddleTabBarButtonUnselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let remindrGray = UIColor(red: 0.580, green: 0.608, blue: 0.627, alpha: 1.000)

        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 3, width: 145, height: 145))
        TabBarIconStyleKit.remindrCyan.setFill()
        oval4Path.fill()
        remindrGray.setStroke()
        oval4Path.lineWidth = 3
        oval4Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 78.77, y: 16.19))
        bezierPath.addLine(to: CGPoint(x: 78.88, y: 16.21))
        bezierPath.addCurve(to: CGPoint(x: 80.47, y: 17.8), controlPoint1: CGPoint(x: 79.62, y: 16.48), controlPoint2: CGPoint(x: 80.21, y: 17.06))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 20.37), controlPoint1: CGPoint(x: 80.69, y: 18.48), controlPoint2: CGPoint(x: 80.69, y: 19.11))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 69.31), controlPoint1: CGPoint(x: 80.69, y: 20.37), controlPoint2: CGPoint(x: 80.69, y: 43.95))
        bezierPath.addLine(to: CGPoint(x: 129.63, y: 69.31))
        bezierPath.addCurve(to: CGPoint(x: 132.09, y: 69.5), controlPoint1: CGPoint(x: 130.89, y: 69.31), controlPoint2: CGPoint(x: 131.52, y: 69.31))
        bezierPath.addLine(to: CGPoint(x: 132.2, y: 69.53))
        bezierPath.addCurve(to: CGPoint(x: 133.79, y: 71.12), controlPoint1: CGPoint(x: 132.94, y: 69.79), controlPoint2: CGPoint(x: 133.52, y: 70.38))
        bezierPath.addCurve(to: CGPoint(x: 134, y: 73.68), controlPoint1: CGPoint(x: 134, y: 71.79), controlPoint2: CGPoint(x: 134, y: 72.42))
        bezierPath.addLine(to: CGPoint(x: 134, y: 76.37))
        bezierPath.addCurve(to: CGPoint(x: 133.81, y: 78.82), controlPoint1: CGPoint(x: 134, y: 77.63), controlPoint2: CGPoint(x: 134, y: 78.26))
        bezierPath.addLine(to: CGPoint(x: 133.79, y: 78.93))
        bezierPath.addCurve(to: CGPoint(x: 132.2, y: 80.52), controlPoint1: CGPoint(x: 133.52, y: 79.67), controlPoint2: CGPoint(x: 132.94, y: 80.25))
        bezierPath.addCurve(to: CGPoint(x: 129.63, y: 80.74), controlPoint1: CGPoint(x: 131.52, y: 80.74), controlPoint2: CGPoint(x: 130.89, y: 80.74))
        bezierPath.addLine(to: CGPoint(x: 80.69, y: 80.74))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 130.63), controlPoint1: CGPoint(x: 80.69, y: 106.45), controlPoint2: CGPoint(x: 80.69, y: 130.63))
        bezierPath.addCurve(to: CGPoint(x: 80.5, y: 133.09), controlPoint1: CGPoint(x: 80.69, y: 131.89), controlPoint2: CGPoint(x: 80.69, y: 132.52))
        bezierPath.addLine(to: CGPoint(x: 80.47, y: 133.2))
        bezierPath.addCurve(to: CGPoint(x: 78.88, y: 134.79), controlPoint1: CGPoint(x: 80.21, y: 133.94), controlPoint2: CGPoint(x: 79.62, y: 134.52))
        bezierPath.addCurve(to: CGPoint(x: 76.32, y: 135), controlPoint1: CGPoint(x: 78.21, y: 135), controlPoint2: CGPoint(x: 77.58, y: 135))
        bezierPath.addLine(to: CGPoint(x: 73.63, y: 135))
        bezierPath.addCurve(to: CGPoint(x: 71.18, y: 134.81), controlPoint1: CGPoint(x: 72.37, y: 135), controlPoint2: CGPoint(x: 71.74, y: 135))
        bezierPath.addLine(to: CGPoint(x: 71.07, y: 134.79))
        bezierPath.addCurve(to: CGPoint(x: 69.48, y: 133.2), controlPoint1: CGPoint(x: 70.33, y: 134.52), controlPoint2: CGPoint(x: 69.75, y: 133.94))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 130.63), controlPoint1: CGPoint(x: 69.26, y: 132.52), controlPoint2: CGPoint(x: 69.26, y: 131.89))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 80.74), controlPoint1: CGPoint(x: 69.26, y: 130.63), controlPoint2: CGPoint(x: 69.26, y: 106.45))
        bezierPath.addLine(to: CGPoint(x: 19.37, y: 80.74))
        bezierPath.addCurve(to: CGPoint(x: 16.91, y: 80.55), controlPoint1: CGPoint(x: 18.11, y: 80.74), controlPoint2: CGPoint(x: 17.48, y: 80.74))
        bezierPath.addLine(to: CGPoint(x: 16.8, y: 80.52))
        bezierPath.addCurve(to: CGPoint(x: 15.21, y: 78.93), controlPoint1: CGPoint(x: 16.06, y: 80.25), controlPoint2: CGPoint(x: 15.48, y: 79.67))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 76.37), controlPoint1: CGPoint(x: 15, y: 78.26), controlPoint2: CGPoint(x: 15, y: 77.63))
        bezierPath.addLine(to: CGPoint(x: 15, y: 73.68))
        bezierPath.addCurve(to: CGPoint(x: 15.19, y: 71.23), controlPoint1: CGPoint(x: 15, y: 72.42), controlPoint2: CGPoint(x: 15, y: 71.79))
        bezierPath.addLine(to: CGPoint(x: 15.21, y: 71.12))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 69.53), controlPoint1: CGPoint(x: 15.48, y: 70.38), controlPoint2: CGPoint(x: 16.06, y: 69.79))
        bezierPath.addCurve(to: CGPoint(x: 19.37, y: 69.31), controlPoint1: CGPoint(x: 17.48, y: 69.31), controlPoint2: CGPoint(x: 18.11, y: 69.31))
        bezierPath.addLine(to: CGPoint(x: 69.26, y: 69.31))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 20.37), controlPoint1: CGPoint(x: 69.26, y: 43.95), controlPoint2: CGPoint(x: 69.26, y: 20.37))
        bezierPath.addCurve(to: CGPoint(x: 69.45, y: 17.91), controlPoint1: CGPoint(x: 69.26, y: 19.11), controlPoint2: CGPoint(x: 69.26, y: 18.48))
        bezierPath.addLine(to: CGPoint(x: 69.48, y: 17.8))
        bezierPath.addCurve(to: CGPoint(x: 71.07, y: 16.21), controlPoint1: CGPoint(x: 69.75, y: 17.06), controlPoint2: CGPoint(x: 70.33, y: 16.48))
        bezierPath.addCurve(to: CGPoint(x: 73.63, y: 16), controlPoint1: CGPoint(x: 71.74, y: 16), controlPoint2: CGPoint(x: 72.37, y: 16))
        bezierPath.addLine(to: CGPoint(x: 76.32, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 78.77, y: 16.19), controlPoint1: CGPoint(x: 77.58, y: 16), controlPoint2: CGPoint(x: 78.21, y: 16))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawMiddleTabBarButtonSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 150, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 150, y: resizedFrame.height / 150)


        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let remindrGray = UIColor(red: 0.580, green: 0.608, blue: 0.627, alpha: 1.000)
        let cancelRed = UIColor(red: 0.820, green: 0.400, blue: 0.400, alpha: 1.000)

        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 2.5, width: 145, height: 145))
        cancelRed.setFill()
        oval4Path.fill()
        remindrGray.setStroke()
        oval4Path.lineWidth = 2
        oval4Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 78.77, y: 16.19))
        bezierPath.addLine(to: CGPoint(x: 78.88, y: 16.21))
        bezierPath.addCurve(to: CGPoint(x: 80.47, y: 17.8), controlPoint1: CGPoint(x: 79.62, y: 16.48), controlPoint2: CGPoint(x: 80.21, y: 17.06))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 20.37), controlPoint1: CGPoint(x: 80.69, y: 18.48), controlPoint2: CGPoint(x: 80.69, y: 19.11))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 69.31), controlPoint1: CGPoint(x: 80.69, y: 20.37), controlPoint2: CGPoint(x: 80.69, y: 43.95))
        bezierPath.addLine(to: CGPoint(x: 129.63, y: 69.31))
        bezierPath.addCurve(to: CGPoint(x: 132.09, y: 69.5), controlPoint1: CGPoint(x: 130.89, y: 69.31), controlPoint2: CGPoint(x: 131.52, y: 69.31))
        bezierPath.addLine(to: CGPoint(x: 132.2, y: 69.53))
        bezierPath.addCurve(to: CGPoint(x: 133.79, y: 71.12), controlPoint1: CGPoint(x: 132.94, y: 69.79), controlPoint2: CGPoint(x: 133.52, y: 70.38))
        bezierPath.addCurve(to: CGPoint(x: 134, y: 73.68), controlPoint1: CGPoint(x: 134, y: 71.79), controlPoint2: CGPoint(x: 134, y: 72.42))
        bezierPath.addLine(to: CGPoint(x: 134, y: 76.37))
        bezierPath.addCurve(to: CGPoint(x: 133.81, y: 78.82), controlPoint1: CGPoint(x: 134, y: 77.63), controlPoint2: CGPoint(x: 134, y: 78.26))
        bezierPath.addLine(to: CGPoint(x: 133.79, y: 78.93))
        bezierPath.addCurve(to: CGPoint(x: 132.2, y: 80.52), controlPoint1: CGPoint(x: 133.52, y: 79.67), controlPoint2: CGPoint(x: 132.94, y: 80.25))
        bezierPath.addCurve(to: CGPoint(x: 129.63, y: 80.74), controlPoint1: CGPoint(x: 131.52, y: 80.74), controlPoint2: CGPoint(x: 130.89, y: 80.74))
        bezierPath.addLine(to: CGPoint(x: 80.69, y: 80.74))
        bezierPath.addCurve(to: CGPoint(x: 80.69, y: 130.63), controlPoint1: CGPoint(x: 80.69, y: 106.45), controlPoint2: CGPoint(x: 80.69, y: 130.63))
        bezierPath.addCurve(to: CGPoint(x: 80.5, y: 133.09), controlPoint1: CGPoint(x: 80.69, y: 131.89), controlPoint2: CGPoint(x: 80.69, y: 132.52))
        bezierPath.addLine(to: CGPoint(x: 80.47, y: 133.2))
        bezierPath.addCurve(to: CGPoint(x: 78.88, y: 134.79), controlPoint1: CGPoint(x: 80.21, y: 133.94), controlPoint2: CGPoint(x: 79.62, y: 134.52))
        bezierPath.addCurve(to: CGPoint(x: 76.32, y: 135), controlPoint1: CGPoint(x: 78.21, y: 135), controlPoint2: CGPoint(x: 77.58, y: 135))
        bezierPath.addLine(to: CGPoint(x: 73.63, y: 135))
        bezierPath.addCurve(to: CGPoint(x: 71.18, y: 134.81), controlPoint1: CGPoint(x: 72.37, y: 135), controlPoint2: CGPoint(x: 71.74, y: 135))
        bezierPath.addLine(to: CGPoint(x: 71.07, y: 134.79))
        bezierPath.addCurve(to: CGPoint(x: 69.48, y: 133.2), controlPoint1: CGPoint(x: 70.33, y: 134.52), controlPoint2: CGPoint(x: 69.75, y: 133.94))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 130.63), controlPoint1: CGPoint(x: 69.26, y: 132.52), controlPoint2: CGPoint(x: 69.26, y: 131.89))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 80.74), controlPoint1: CGPoint(x: 69.26, y: 130.63), controlPoint2: CGPoint(x: 69.26, y: 106.45))
        bezierPath.addLine(to: CGPoint(x: 19.37, y: 80.74))
        bezierPath.addCurve(to: CGPoint(x: 16.91, y: 80.55), controlPoint1: CGPoint(x: 18.11, y: 80.74), controlPoint2: CGPoint(x: 17.48, y: 80.74))
        bezierPath.addLine(to: CGPoint(x: 16.8, y: 80.52))
        bezierPath.addCurve(to: CGPoint(x: 15.21, y: 78.93), controlPoint1: CGPoint(x: 16.06, y: 80.25), controlPoint2: CGPoint(x: 15.48, y: 79.67))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 76.37), controlPoint1: CGPoint(x: 15, y: 78.26), controlPoint2: CGPoint(x: 15, y: 77.63))
        bezierPath.addLine(to: CGPoint(x: 15, y: 73.68))
        bezierPath.addCurve(to: CGPoint(x: 15.19, y: 71.23), controlPoint1: CGPoint(x: 15, y: 72.42), controlPoint2: CGPoint(x: 15, y: 71.79))
        bezierPath.addLine(to: CGPoint(x: 15.21, y: 71.12))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 69.53), controlPoint1: CGPoint(x: 15.48, y: 70.38), controlPoint2: CGPoint(x: 16.06, y: 69.79))
        bezierPath.addCurve(to: CGPoint(x: 19.37, y: 69.31), controlPoint1: CGPoint(x: 17.48, y: 69.31), controlPoint2: CGPoint(x: 18.11, y: 69.31))
        bezierPath.addLine(to: CGPoint(x: 69.26, y: 69.31))
        bezierPath.addCurve(to: CGPoint(x: 69.26, y: 20.37), controlPoint1: CGPoint(x: 69.26, y: 43.95), controlPoint2: CGPoint(x: 69.26, y: 20.37))
        bezierPath.addCurve(to: CGPoint(x: 69.45, y: 17.91), controlPoint1: CGPoint(x: 69.26, y: 19.11), controlPoint2: CGPoint(x: 69.26, y: 18.48))
        bezierPath.addLine(to: CGPoint(x: 69.48, y: 17.8))
        bezierPath.addCurve(to: CGPoint(x: 71.07, y: 16.21), controlPoint1: CGPoint(x: 69.75, y: 17.06), controlPoint2: CGPoint(x: 70.33, y: 16.48))
        bezierPath.addCurve(to: CGPoint(x: 73.63, y: 16), controlPoint1: CGPoint(x: 71.74, y: 16), controlPoint2: CGPoint(x: 72.37, y: 16))
        bezierPath.addLine(to: CGPoint(x: 76.32, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 78.77, y: 16.19), controlPoint1: CGPoint(x: 77.58, y: 16), controlPoint2: CGPoint(x: 78.21, y: 16))
        bezierPath.close()
        white.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfIncompleteListIconUnselected: UIImage {
        if Cache.imageOfIncompleteListIconUnselected != nil {
            return Cache.imageOfIncompleteListIconUnselected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawIncompleteListIconUnselected()

        Cache.imageOfIncompleteListIconUnselected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIncompleteListIconUnselected!
    }

    public dynamic class var imageOfCompleteListIconSelected: UIImage {
        if Cache.imageOfCompleteListIconSelected != nil {
            return Cache.imageOfCompleteListIconSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawCompleteListIconSelected()

        Cache.imageOfCompleteListIconSelected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCompleteListIconSelected!
    }

    public dynamic class var imageOfIncompleteListIconSelected: UIImage {
        if Cache.imageOfIncompleteListIconSelected != nil {
            return Cache.imageOfIncompleteListIconSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawIncompleteListIconSelected()

        Cache.imageOfIncompleteListIconSelected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIncompleteListIconSelected!
    }

    public dynamic class var imageOfCompleteListIconUnselected: UIImage {
        if Cache.imageOfCompleteListIconUnselected != nil {
            return Cache.imageOfCompleteListIconUnselected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawCompleteListIconUnselected()

        Cache.imageOfCompleteListIconUnselected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCompleteListIconUnselected!
    }

    public dynamic class var imageOfMiddleTabBarButtonUnselected: UIImage {
        if Cache.imageOfMiddleTabBarButtonUnselected != nil {
            return Cache.imageOfMiddleTabBarButtonUnselected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawMiddleTabBarButtonUnselected()

        Cache.imageOfMiddleTabBarButtonUnselected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMiddleTabBarButtonUnselected!
    }

    public dynamic class var imageOfMiddleTabBarButtonSelected: UIImage {
        if Cache.imageOfMiddleTabBarButtonSelected != nil {
            return Cache.imageOfMiddleTabBarButtonSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 150, height: 150), false, 0)
            TabBarIconStyleKit.drawMiddleTabBarButtonSelected()

        Cache.imageOfMiddleTabBarButtonSelected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMiddleTabBarButtonSelected!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var incompleteListIconUnselectedTargets: [AnyObject]! {
        get { return Cache.incompleteListIconUnselectedTargets }
        set {
            Cache.incompleteListIconUnselectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfIncompleteListIconUnselected)
            }
        }
    }

    @IBOutlet dynamic var completeListIconSelectedTargets: [AnyObject]! {
        get { return Cache.completeListIconSelectedTargets }
        set {
            Cache.completeListIconSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfCompleteListIconSelected)
            }
        }
    }

    @IBOutlet dynamic var incompleteListIconSelectedTargets: [AnyObject]! {
        get { return Cache.incompleteListIconSelectedTargets }
        set {
            Cache.incompleteListIconSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfIncompleteListIconSelected)
            }
        }
    }

    @IBOutlet dynamic var completeListIconUnselectedTargets: [AnyObject]! {
        get { return Cache.completeListIconUnselectedTargets }
        set {
            Cache.completeListIconUnselectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfCompleteListIconUnselected)
            }
        }
    }

    @IBOutlet dynamic var middleTabBarButtonUnselectedTargets: [AnyObject]! {
        get { return Cache.middleTabBarButtonUnselectedTargets }
        set {
            Cache.middleTabBarButtonUnselectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfMiddleTabBarButtonUnselected)
            }
        }
    }

    @IBOutlet dynamic var middleTabBarButtonSelectedTargets: [AnyObject]! {
        get { return Cache.middleTabBarButtonSelectedTargets }
        set {
            Cache.middleTabBarButtonSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TabBarIconStyleKit.imageOfMiddleTabBarButtonSelected)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
