//
//  IncompleteListIcon.swift
//  Remindr
//
//  Created by Spencer Curtis on 2/3/17.
//  Copyright Â© 2017 Spencer Curtis. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class IncompleteListIcon : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfIncompleteListIconSelected: UIImage?
        static var incompleteListIconSelectedTargets: [AnyObject]?
        static var imageOfIncompleteListIconUnselected: UIImage?
        static var incompleteListIconUnselectedTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawIncompleteListIconSelected() {

        //// Page Drawing
        let pagePath = UIBezierPath()
        pagePath.move(to: CGPoint(x: 0.5, y: 50.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 90.5), controlPoint1: CGPoint(x: 0.5, y: 89.14), controlPoint2: CGPoint(x: 0.5, y: 90.5))
        pagePath.addCurve(to: CGPoint(x: 10.5, y: 100.5), controlPoint1: CGPoint(x: 0.5, y: 90.5), controlPoint2: CGPoint(x: 0.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 62.5, y: 100.5), controlPoint1: CGPoint(x: 20.5, y: 100.5), controlPoint2: CGPoint(x: 62.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 90.5), controlPoint1: CGPoint(x: 62.5, y: 100.5), controlPoint2: CGPoint(x: 72.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 50.5), controlPoint1: CGPoint(x: 72.5, y: 85.65), controlPoint2: CGPoint(x: 72.5, y: 67.77))
        pagePath.move(to: CGPoint(x: 72.5, y: 50.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 10.5), controlPoint1: CGPoint(x: 72.5, y: 11.86), controlPoint2: CGPoint(x: 72.5, y: 10.5))
        pagePath.addCurve(to: CGPoint(x: 62.5, y: 0.5), controlPoint1: CGPoint(x: 72.5, y: 10.5), controlPoint2: CGPoint(x: 72.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 10.5, y: 0.5), controlPoint1: CGPoint(x: 52.5, y: 0.5), controlPoint2: CGPoint(x: 10.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 10.5), controlPoint1: CGPoint(x: 10.5, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 50.5), controlPoint1: CGPoint(x: 0.5, y: 15.35), controlPoint2: CGPoint(x: 0.5, y: 33.23))
        UIColor.white.setFill()
        pagePath.fill()
        UIColor.black.setStroke()
        pagePath.lineWidth = 1
        pagePath.stroke()


        //// Page Lines
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 8, y: 18, width: 58, height: 1))
        UIColor.gray.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 8, y: 26.5, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 7.5, y: 35, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 7.5, y: 43, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 7.5, y: 51, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 7.5, y: 60, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 7.5, y: 68, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 7.5, y: 76, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 7.5, y: 84.5, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 7.5, y: 93, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 8, y: 9.5, width: 58, height: 1))
        UIColor.gray.setFill()
        rectangle11Path.fill()
    }

    public dynamic class func drawIncompleteListIconUnselected() {

        //// Page Drawing
        let pagePath = UIBezierPath()
        pagePath.move(to: CGPoint(x: 0.5, y: 50.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 90.5), controlPoint1: CGPoint(x: 0.5, y: 89.14), controlPoint2: CGPoint(x: 0.5, y: 90.5))
        pagePath.addCurve(to: CGPoint(x: 10.5, y: 100.5), controlPoint1: CGPoint(x: 0.5, y: 90.5), controlPoint2: CGPoint(x: 0.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 62.5, y: 100.5), controlPoint1: CGPoint(x: 20.5, y: 100.5), controlPoint2: CGPoint(x: 62.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 90.5), controlPoint1: CGPoint(x: 62.5, y: 100.5), controlPoint2: CGPoint(x: 72.5, y: 100.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 50.5), controlPoint1: CGPoint(x: 72.5, y: 85.65), controlPoint2: CGPoint(x: 72.5, y: 67.77))
        pagePath.move(to: CGPoint(x: 72.5, y: 50.5))
        pagePath.addCurve(to: CGPoint(x: 72.5, y: 10.5), controlPoint1: CGPoint(x: 72.5, y: 11.86), controlPoint2: CGPoint(x: 72.5, y: 10.5))
        pagePath.addCurve(to: CGPoint(x: 62.5, y: 0.5), controlPoint1: CGPoint(x: 72.5, y: 10.5), controlPoint2: CGPoint(x: 72.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 10.5, y: 0.5), controlPoint1: CGPoint(x: 52.5, y: 0.5), controlPoint2: CGPoint(x: 10.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 10.5), controlPoint1: CGPoint(x: 10.5, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.5))
        pagePath.addCurve(to: CGPoint(x: 0.5, y: 50.5), controlPoint1: CGPoint(x: 0.5, y: 15.35), controlPoint2: CGPoint(x: 0.5, y: 33.23))
        UIColor.lightGray.setFill()
        pagePath.fill()
        UIColor.black.setStroke()
        pagePath.lineWidth = 1
        pagePath.stroke()


        //// Page Lines
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 8, y: 18, width: 58, height: 1))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 8, y: 26.5, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 7.5, y: 35, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 7.5, y: 43, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 7.5, y: 51, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 7.5, y: 60, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 7.5, y: 68, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 7.5, y: 76, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 7.5, y: 84.5, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 7.5, y: 93, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle10Path.fill()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 8, y: 9.5, width: 58, height: 1))
        UIColor.white.setFill()
        rectangle11Path.fill()
    }

    //// Generated Images

    public dynamic class var imageOfIncompleteListIconSelected: UIImage {
        if Cache.imageOfIncompleteListIconSelected != nil {
            return Cache.imageOfIncompleteListIconSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 101), false, 0)
            IncompleteListIcon.drawIncompleteListIconSelected()

        Cache.imageOfIncompleteListIconSelected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfIncompleteListIconSelected!
    }

    public dynamic class var imageOfIncompleteListIconUnselected: UIImage {
        if Cache.imageOfIncompleteListIconUnselected != nil {
            return Cache.imageOfIncompleteListIconUnselected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 101), false, 0)
            IncompleteListIcon.drawIncompleteListIconUnselected()

        Cache.imageOfIncompleteListIconUnselected = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfIncompleteListIconUnselected!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var incompleteListIconSelectedTargets: [AnyObject]! {
        get { return Cache.incompleteListIconSelectedTargets }
        set {
            Cache.incompleteListIconSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IncompleteListIcon.imageOfIncompleteListIconSelected)
            }
        }
    }

    @IBOutlet dynamic var incompleteListIconUnselectedTargets: [AnyObject]! {
        get { return Cache.incompleteListIconUnselectedTargets }
        set {
            Cache.incompleteListIconUnselectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IncompleteListIcon.imageOfIncompleteListIconUnselected)
            }
        }
    }

}
