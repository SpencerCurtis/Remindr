//
//  CustomTabBarStyleKit.swift
//  Remindr
//
//  Created by Spencer Curtis on 2/7/17.
//  Copyright Â© 2017 Spencer Curtis. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CustomTabBarStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawCustomTabBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 376, height: 57), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 376, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 376, y: resizedFrame.height / 57)


        //// Color Declarations
        let silver = UIColor(red: 0.757, green: 0.757, blue: 0.757, alpha: 1.000)
        var silverRedComponent: CGFloat = 1
        var silverGreenComponent: CGFloat = 1
        var silverBlueComponent: CGFloat = 1
        silver.getRed(&silverRedComponent, green: &silverGreenComponent, blue: &silverBlueComponent, alpha: nil)

        let silver3 = UIColor(red: (silverRedComponent * 0.8), green: (silverGreenComponent * 0.8), blue: (silverBlueComponent * 0.8), alpha: (silver.cgColor.alpha * 0.8 + 0.2))

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 188, y: 19), controlPoint1: CGPoint(x: 0, y: -0), controlPoint2: CGPoint(x: 94, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 376, y: -0), controlPoint1: CGPoint(x: 282, y: 19), controlPoint2: CGPoint(x: 376, y: -0))
        bezierPath.addLine(to: CGPoint(x: 376, y: 57))
        bezierPath.addLine(to: CGPoint(x: 0, y: 57))
        bezierPath.addLine(to: CGPoint(x: 0, y: -0))
        bezierPath.close()
        silver3.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
